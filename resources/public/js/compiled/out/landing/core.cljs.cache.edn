{:rename-macros {}, :renames {}, :externs {document {getElementById {}}, console {log {}}}, :use-macros {}, :excludes #{}, :name landing.core, :imports nil, :requires {reagent reagent.core, reagent.core reagent.core, landing.components.form-feedback landing.components.form-feedback}, :cljs.spec/speced-vars [], :uses {atom reagent.core, form-feedback landing.components.form-feedback}, :defs {app-state {:name landing.core/app-state, :file "src/landing/core.cljs", :line 11, :column 1, :end-line 11, :end-column 19, :meta {:file "/home/lexa/projects/unionchc/landing_save/src/landing/core.cljs", :line 11, :column 10, :end-line 11, :end-column 19}, :tag any}, hello-world {:protocol-inline nil, :meta {:file "/home/lexa/projects/unionchc/landing_save/src/landing/core.cljs", :line 14, :column 7, :end-line 14, :end-column 18, :arglists (quote ([]))}, :name landing.core/hello-world, :variadic false, :file "src/landing/core.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, on-js-reload {:protocol-inline nil, :meta {:file "/home/lexa/projects/unionchc/landing_save/src/landing/core.cljs", :line 22, :column 7, :end-line 22, :end-column 19, :arglists (quote ([]))}, :name landing.core/on-js-reload, :variadic false, :file "src/landing/core.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, init {:protocol-inline nil, :meta {:file "/home/lexa/projects/unionchc/landing_save/src/landing/core.cljs", :line 28, :column 16, :end-line 28, :end-column 20, :export true, :arglists (quote ([]))}, :name landing.core/init, :variadic false, :file "src/landing/core.cljs", :end-column 20, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :cljs.spec/registry-ref [], :require-macros {reagent reagent.core, reagent.core reagent.core}, :cljs.analyzer/constants {:seen #{:div :h1 :h3 :text}, :order [:text :div :h1 :h3]}, :doc nil}